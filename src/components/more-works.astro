---
import { getCollection } from "astro:content";
import WorkCard from "./work-card.astro";
import type { Category } from "@/config/categories";

interface Props {
  currentSlug: string;
}

const { currentSlug } = Astro.props;

const allWorks = await getCollection("works");

const currentWork = allWorks.find((work) => work.slug === currentSlug);
if (!currentWork) throw new Error(`Work with slug "${currentSlug}" not found.`);

const otherWorks = allWorks.filter((work) => work.slug !== currentSlug);

const scoredWorks = otherWorks
  .map((work) => {
    const sharedTags =
      work.data.categories?.filter((category: Category) =>
        currentWork.data.categories?.includes(category)
      ) ?? [];
    return { work, score: sharedTags.length };
  })
  .filter(({ score }) => score > 0)
  .sort((a, b) => b.score - a.score);

let similarWorks = scoredWorks.map(({ work }) => work).slice(0, 3);

// Fallback: pad with unscored works if needed
if (similarWorks.length < 3) {
  const alreadyIncluded = new Set(similarWorks.map((p) => p.slug));
  const fallbackWorks = otherWorks
    .filter((p) => !alreadyIncluded.has(p.slug))
    .slice(0, 3 - similarWorks.length);
  similarWorks = [...similarWorks, ...fallbackWorks];
}
---

<section class="mt-16">
  <h2 class="text-2xl mb-8">More Works</h2>
  <div class="grid md:grid-cols-3 gap-12 md:p-12">
    {similarWorks.map((work) => <WorkCard work={work} />)}
  </div>
</section>
