---
import { cn } from "@/lib/utils";
import ChevronDown from "lucide-static/icons/chevron-down.svg";

interface Props {
  triggerLabel: string;
  menuId: string;
  align?: "left" | "right";
  isActive?: boolean;
}

const { triggerLabel, menuId, align = "left", isActive = false } = Astro.props;

const alignClasses = {
  left: "left-0",
  right: "right-0",
};
---

<li class="relative group w-full">
  <button
    type="button"
    class={cn(
      "flex items-center justify-between gap-1 rounded-md px-3 py-2 hover:bg-accent/50 hover:text-accent-foreground w-full transition-colors duration-200",
      isActive && "text-primary hover:text-primary hover:bg-accent bg-accent"
    )}
    aria-expanded="false"
    aria-controls={menuId}
    data-dropdown-trigger
  >
    {triggerLabel}
    <ChevronDown
      class="w-4 h-4 transition-transform duration-200 group-hover:rotate-180"
    />
  </button>
  <div
    id={menuId}
    class={cn(
      "absolute top-full z-50 opacity-0 invisible min-w-full w-[15rem] rounded-lg border bg-background p-2 shadow-lg transition-all duration-200 transform origin-top scale-95",
      alignClasses[align],
      "group-hover:opacity-100 group-hover:visible group-hover:scale-100 group-hover:backdrop-blur-md group-hover:shadow-lg"
    )}
    data-dropdown-menu
  >
    <ul class="space-y-1">
      <slot />
    </ul>
  </div>
</li>

<script>
  document.addEventListener("click", (event: MouseEvent) => {
    const target = event.target as HTMLElement;
    const trigger = target.closest("[data-dropdown-trigger]");
    if (!trigger) {
      // Close all dropdowns when clicking outside
      document.querySelectorAll("[data-dropdown-menu]").forEach((menu) => {
        menu.classList.remove("opacity-100", "visible", "scale-100");
        menu.classList.add("opacity-0", "invisible", "scale-95");
      });
      return;
    }

    const menu = trigger.nextElementSibling;
    if (!menu) return;

    const isExpanded = trigger.getAttribute("aria-expanded") === "true";

    // Close all other dropdowns
    document.querySelectorAll("[data-dropdown-menu]").forEach((otherMenu) => {
      if (otherMenu !== menu) {
        otherMenu.classList.remove("opacity-100", "visible", "scale-100");
        otherMenu.classList.add("opacity-0", "invisible", "scale-95");
        otherMenu.previousElementSibling?.setAttribute(
          "aria-expanded",
          "false"
        );
      }
    });

    // Toggle current dropdown
    if (isExpanded) {
      menu.classList.remove("opacity-100", "visible", "scale-100");
      menu.classList.add("opacity-0", "invisible", "scale-95");
      trigger.setAttribute("aria-expanded", "false");
    } else {
      menu.classList.add("opacity-100", "visible", "scale-100");
      menu.classList.remove("opacity-0", "invisible", "scale-95");
      trigger.setAttribute("aria-expanded", "true");
    }
  });
</script>
