---
import { CATEGORY_MAP, type CategoryCollectionType } from "@/content/categories";
import { capitalize, getCategoryPath, normalizePath } from "@/lib/utils";
import LinksGrid from "./links-grid.astro";

interface Props {
	type: CategoryCollectionType;
}

const { type } = Astro.props;
const currentPath = Astro.url.pathname;
const allPath = normalizePath(type === "works" ? "/works" : `/${type}`);
const allIsActive = normalizePath(currentPath) === allPath;

const categories = Object.values(CATEGORY_MAP[type]);

const isActive = (category: string) => {
	return normalizePath(currentPath).includes(category.toLowerCase());
};

const links = [
	{
		href: allPath,
		label: "All",
		short: "All",
		active: allIsActive,
	},
	...categories.map((category) => ({
		href: getCategoryPath(category, `/${type}`),
		label: capitalize(category),
		active: isActive(category),
	})),
];
---

<div class="relative -mx-4 max-w-dvw overflow-x-hidden px-4">
	<!-- Gradient edges -->
	<div
		class="from-background pointer-events-none absolute inset-y-0 left-0 z-10 w-10 bg-gradient-to-r to-transparent"
	>
	</div>
	<div
		class="from-background pointer-events-none absolute inset-y-0 right-0 z-10 w-10 bg-gradient-to-l to-transparent"
	>
	</div>

	<!-- Scroll container -->
	<div
		class="scrollbar-none hide-scrollbar -mx-4 touch-auto overflow-x-auto overscroll-contain px-4"
	>
		<div class="h-12">
			<LinksGrid links={links} class={`min-w-[48rem] grid-cols-${links.length}`} />
		</div>
	</div>
</div>

<!-- 

<div class="relative -mx-4 max-w-dvw overflow-x-hidden px-4">

	<div
		class="from-background pointer-events-none absolute inset-y-0 left-0 z-10 w-5 bg-gradient-to-r to-transparent"
	>
	</div>
	<div
		class="from-background pointer-events-none absolute inset-y-0 right-0 z-10 w-5 bg-gradient-to-l to-transparent"
	>
	</div>


	<div
		class="scrollbar-none hide-scrollbar -mx-4 touch-auto overflow-x-auto overscroll-contain px-4"
	>
		<ul class="flex min-w-max items-center gap-6 pr-5">
			<li>
				<CategorySelectorLink href={allPath} isActive={allIsActive}> All </CategorySelectorLink>
			</li>
			{
				categories.map((category) => (
					<li>
						<CategorySelectorLink
							href={getCategoryPath(category, `/${type}`)}
							isActive={isActive(category)}
						>
							{capitalize(category)}
						</CategorySelectorLink>
					</li>
				))
			}
		</ul>
	</div> -->
