---
import { CATEGORY_MAP, type CategoryCollectionType, type Category } from "@/content/categories";
import { capitalize, getCategoryPath, normalizePath } from "@/lib/utils";
import LinksGrid from "./links-grid.astro";
import type { URLMetadata } from "@/content/urls";

interface Props {
	type: CategoryCollectionType;
}

const { type } = Astro.props;
const currentPath = Astro.url.pathname;
const allPath = normalizePath(type === "works" ? "/works" : `/${type}`);
const allIsActive = normalizePath(currentPath) === allPath;

const categories = Object.values(CATEGORY_MAP[type]) as Category[];

const isActive = (category: Category) => {
	const categoryPath = getCategoryPath(category, `/${type}`);
	return normalizePath(currentPath) === normalizePath(categoryPath);
};

const links: (URLMetadata & { active: boolean })[] = [
	{
		url: allPath,
		site: "All",
		active: allIsActive,
	},
	...categories.map((category) => ({
		url: getCategoryPath(category, `/${type}`),
		site: capitalize(category),
		active: isActive(category),
	})),
];
---

<div class="relative -mx-4 overflow-x-hidden px-4">
	<div
		class="scrollbar-none hide-scrollbar -mx-4 touch-auto overflow-x-auto overscroll-contain border-t border-b px-4"
	>
		<div class="h-12">
			<LinksGrid links={links} class="min-w-max" />

			<!-- Scroll gradient -->
			<div
				class="from-background pointer-events-none absolute inset-y-0 left-0 z-10 w-8 bg-gradient-to-r to-transparent md:w-10"
			>
			</div>
			<div
				class="from-background pointer-events-none absolute inset-y-0 right-0 z-10 w-8 bg-gradient-to-l to-transparent md:w-10"
			>
			</div>
		</div>
	</div>
</div>
